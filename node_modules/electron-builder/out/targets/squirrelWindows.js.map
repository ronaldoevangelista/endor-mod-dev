{
  "version": 3,
  "file": "squirrelWindows.js",
  "sourceRoot": "",
  "sources": [
    "../../src/targets/squirrelWindows.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { WinPackager } from \"../winPackager\"\nimport { getArchSuffix, Target } from \"../platformPackager\"\nimport { Arch, WinBuildOptions } from \"../metadata\"\nimport { createWindowsInstaller, convertVersion } from \"electron-winstaller-fixed\"\nimport * as path from \"path\"\nimport { warn } from \"../util/log\"\nimport { emptyDir } from \"fs-extra-p\"\nimport { getRepositoryInfo } from \"../repositoryInfo\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"../util/awaiter\")\n\nexport default class SquirrelWindowsTarget extends Target {\n  constructor(private packager: WinPackager) {\n    super(\"squirrel\")\n  }\n\n  async build(arch: Arch, appOutDir: string) {\n    if (arch === Arch.ia32) {\n      warn(\"For windows consider only distributing 64-bit, see https://github.com/electron-userland/electron-builder/issues/359#issuecomment-214851130\")\n    }\n\n    const appInfo = this.packager.appInfo\n    const version = appInfo.version\n    const archSuffix = getArchSuffix(arch)\n    const  setupFileName = `${appInfo.productFilename} Setup ${version}${archSuffix}.exe`\n\n    const installerOutDir = path.join(appOutDir, \"..\", `win${getArchSuffix(arch)}`)\n    await emptyDir(installerOutDir)\n\n    const distOptions = await this.computeEffectiveDistOptions(appOutDir, installerOutDir, setupFileName)\n    await createWindowsInstaller(distOptions)\n    this.packager.dispatchArtifactCreated(path.join(installerOutDir, setupFileName), `${appInfo.name}-Setup-${version}${archSuffix}.exe`)\n\n    const packagePrefix = `${appInfo.name}-${convertVersion(version)}-`\n    this.packager.dispatchArtifactCreated(path.join(installerOutDir, `${packagePrefix}full.nupkg`))\n    if (distOptions.remoteReleases != null) {\n      this.packager.dispatchArtifactCreated(path.join(installerOutDir, `${packagePrefix}delta.nupkg`))\n    }\n\n    this.packager.dispatchArtifactCreated(path.join(installerOutDir, \"RELEASES\"))\n  }\n\n  async computeEffectiveDistOptions(appOutDir: string, installerOutDir: string, setupExeName: string): Promise<WinBuildOptions> {\n    const packager = this.packager\n    let iconUrl = packager.platformSpecificBuildOptions.iconUrl || packager.devMetadata.build.iconUrl\n    if (iconUrl == null) {\n      const info = await getRepositoryInfo(packager.appInfo.metadata, packager.devMetadata)\n      if (info != null) {\n        iconUrl = `https://github.com/${info.user}/${info.project}/blob/master/${packager.relativeBuildResourcesDirname}/icon.ico?raw=true`\n      }\n\n      if (iconUrl == null) {\n        throw new Error(\"iconUrl is not specified, please see https://github.com/electron-userland/electron-builder/wiki/Options#WinBuildOptions-iconUrl\")\n      }\n    }\n\n    checkConflictingOptions(packager.platformSpecificBuildOptions)\n\n    const appInfo = packager.appInfo\n    const projectUrl = await appInfo.computePackageUrl()\n    const rceditOptions = {\n      \"version-string\": appInfo.versionString,\n      \"file-version\": appInfo.buildVersion,\n      \"product-version\": appInfo.version,\n    }\n\n    const cscInfo = await packager.cscInfo\n    const options: any = Object.assign({\n      name: appInfo.name,\n      productName: appInfo.productName,\n      exe: `${appInfo.productFilename}.exe`,\n      setupExe: setupExeName,\n      msiExe: setupExeName.replace(\".exe\", \".msi\"),\n      title: appInfo.productName,\n      appDirectory: appOutDir,\n      outputDirectory: installerOutDir,\n      version: appInfo.version,\n      description: appInfo.description,\n      authors: appInfo.companyName,\n      iconUrl: iconUrl,\n      setupIcon: await packager.getIconPath(),\n      certificateFile: cscInfo == null ? null : cscInfo.file,\n      certificatePassword: cscInfo == null ? null : cscInfo.password,\n      fixUpPaths: false,\n      skipUpdateIcon: true,\n      usePackageJson: false,\n      extraMetadataSpecs: projectUrl == null ? null : `\\n    <projectUrl>${projectUrl}</projectUrl>`,\n      copyright: appInfo.copyright,\n      packageCompressionLevel: packager.devMetadata.build.compression === \"store\" ? 0 : 9,\n      sign: {\n        name: appInfo.productName,\n        site: projectUrl,\n        overwrite: true,\n        hash: packager.platformSpecificBuildOptions.signingHashAlgorithms,\n      },\n      rcedit: rceditOptions,\n    }, packager.platformSpecificBuildOptions)\n\n    if (!(\"loadingGif\" in options)) {\n      const resourceList = await packager.resourceList\n      if (resourceList.includes(\"install-spinner.gif\")) {\n        options.loadingGif = path.join(packager.buildResourcesDir, \"install-spinner.gif\")\n      }\n    }\n\n    return options\n  }\n}\n\nfunction checkConflictingOptions(options: any) {\n  for (let name of [\"outputDirectory\", \"appDirectory\", \"exe\", \"fixUpPaths\", \"usePackageJson\", \"extraFileSpecs\", \"extraMetadataSpecs\", \"skipUpdateIcon\", \"setupExe\"]) {\n    if (name in options) {\n      throw new Error(`Option ${name} is ignored, do not specify it.`)\n    }\n  }\n\n  if (\"noMsi\" in options) {\n    warn(`noMsi is deprecated, please specify as \"msi\": true if you want to create an MSI installer`)\n    options.msi = !options.noMsi\n  }\n\n  const msi = options.msi\n  if (msi != null && typeof msi !== \"boolean\") {\n    throw new Error(`msi expected to be boolean value, but string '\"${msi}\"' was specified`)\n  }\n}"
  ]
}
