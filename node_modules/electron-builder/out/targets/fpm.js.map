{
  "version": 3,
  "file": "fpm.js",
  "sourceRoot": "",
  "sources": [
    "../../src/targets/fpm.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { LinuxBuildOptions, Arch } from \"../metadata\"\nimport { smarten, PlatformPackager, TargetEx } from \"../platformPackager\"\nimport { use, exec } from \"../util/util\"\nimport * as path from \"path\"\nimport { downloadFpm } from \"../util/binDownload\"\nimport {  readFile, outputFile } from \"fs-extra-p\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { LinuxTargetHelper, installPrefix } from \"./LinuxTargetHelper\"\n\nconst template = require(\"lodash.template\")\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"../util/awaiter\")\n\nconst fpmPath = (process.platform === \"win32\" || process.env.USE_SYSTEM_FPM === \"true\") ?\n  BluebirdPromise.resolve(\"fpm\") :\n  downloadFpm(process.platform === \"darwin\" ? \"1.5.1-20150715-2.2.2\" : \"1.5.0-2.3.1\", process.platform === \"darwin\" ? \"osx\" : `linux-x86${process.arch === \"ia32\" ? \"\" : \"_64\"}`)\n\nexport default class FpmTarget extends TargetEx {\n  private readonly options = Object.assign({}, this.packager.platformSpecificBuildOptions, (<any>this.packager.devMetadata.build)[this.name])\n\n  private readonly scriptFiles: Promise<Array<string>>\n  private readonly desktopEntry: Promise<string>\n\n  constructor(name: string, private packager: PlatformPackager<LinuxBuildOptions>, private helper: LinuxTargetHelper, private outDir: string) {\n    super(name)\n\n    this.scriptFiles = this.createScripts(helper.tempDirPromise)\n    this.desktopEntry = helper.computeDesktopEntry()\n  }\n\n  private async createScripts(tempDirPromise: Promise<string>): Promise<Array<string>> {\n    const tempDir = await tempDirPromise\n    const defaultTemplatesDir = path.join(__dirname, \"..\", \"..\", \"templates\", \"linux\")\n\n    const templateOptions = Object.assign({\n      // old API compatibility\n      executable: this.packager.appInfo.productFilename,\n    }, this.packager.platformSpecificBuildOptions)\n\n    const afterInstallTemplate = this.packager.platformSpecificBuildOptions.afterInstall || path.join(defaultTemplatesDir, \"after-install.tpl\")\n    const afterInstallFilePath = writeConfigFile(tempDir, afterInstallTemplate, templateOptions)\n\n    const afterRemoveTemplate = this.packager.platformSpecificBuildOptions.afterRemove || path.join(defaultTemplatesDir, \"after-remove.tpl\")\n    const afterRemoveFilePath = writeConfigFile(tempDir, afterRemoveTemplate, templateOptions)\n\n    return await BluebirdPromise.all<string>([afterInstallFilePath, afterRemoveFilePath])\n  }\n\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    const target = this.name\n    const destination = path.join(this.outDir, this.packager.generateName(target, arch, true /* on Linux we use safe name â€” without space */))\n\n    const scripts = await this.scriptFiles\n    const packager = this.packager\n    const appInfo = packager.appInfo\n\n    const projectUrl = await appInfo.computePackageUrl()\n    if (projectUrl == null) {\n      throw new Error(\"Please specify project homepage, see https://github.com/electron-userland/electron-builder/wiki/Options#AppMetadata-homepage\")\n    }\n\n    const options = this.options\n    const author = options.maintainer || `${appInfo.metadata.author!.name} <${appInfo.metadata.author!.email}>`\n    const synopsis = options.synopsis\n    const args = [\n      \"-s\", \"dir\",\n      \"-t\", target,\n      \"--architecture\", arch === Arch.ia32 ? \"i386\" : \"amd64\",\n      \"--name\", appInfo.name,\n      \"--force\",\n      \"--after-install\", scripts[0],\n      \"--after-remove\", scripts[1],\n      \"--description\", smarten(target === \"rpm\" ? options.description! : `${synopsis || \"\"}\\n ${options.description}`),\n      \"--maintainer\", author,\n      \"--vendor\", options.vendor || author,\n      \"--version\", appInfo.version,\n      \"--package\", destination,\n      \"--url\", projectUrl,\n    ]\n\n    if (target === \"deb\") {\n      args.push(\"--deb-compression\", options.compression || (packager.devMetadata.build.compression === \"store\" ? \"gz\" : \"xz\"))\n    }\n    else if (target === \"rpm\") {\n      // args.push(\"--rpm-compression\", options.compression || (this.devMetadata.build.compression === \"store\" ? \"none\" : \"xz\"))\n      args.push(\"--rpm-os\", \"linux\")\n\n      if (synopsis != null) {\n        args.push(\"--rpm-summary\", smarten(synopsis))\n      }\n    }\n\n    let depends = options.depends\n    if (depends == null) {\n      if (target === \"deb\") {\n        depends = [\"libappindicator1\", \"libnotify-bin\"]\n      }\n      else {\n        depends = []\n      }\n    }\n    else if (!Array.isArray(depends)) {\n      if (typeof depends === \"string\") {\n        depends = [<string>depends]\n      }\n      else {\n        throw new Error(`depends must be Array or String, but specified as: ${depends}`)\n      }\n    }\n\n    for (let dep of depends) {\n      args.push(\"--depends\", dep)\n    }\n\n    use(packager.appInfo.metadata.license || packager.devMetadata.license, it => args.push(\"--license\", it!))\n    use(appInfo.buildNumber, it => args.push(\"--iteration\", it!))\n\n    use(options.fpm, it => args.push(...<any>it))\n\n    args.push(`${appOutDir}/=${installPrefix}/${appInfo.productFilename}`)\n    for (let mapping of (await this.helper.icons)) {\n      args.push(mapping.join(\"=/usr/share/icons/hicolor/\"))\n    }\n\n    args.push(`${await this.desktopEntry}=/usr/share/applications/${appInfo.productFilename}.desktop`)\n\n    await exec(await fpmPath, args)\n\n    this.packager.dispatchArtifactCreated(destination)\n  }\n}\n\nasync function writeConfigFile(tempDir: string, templatePath: string, options: any): Promise<string> {\n  const config = template(await readFile(templatePath, \"utf8\"),\n    {\n      // set interpolate explicitly to avoid troubles with templating of installer.nsi.tpl\n      interpolate: /<%=([\\s\\S]+?)%>/g\n    })(options)\n\n  const outputPath = path.join(tempDir, path.basename(templatePath, \".tpl\"))\n  await outputFile(outputPath, config)\n  return outputPath\n}"
  ]
}
