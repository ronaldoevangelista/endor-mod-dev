{
  "version": 3,
  "file": "deepAssign.js",
  "sourceRoot": "",
  "sources": [
    "../../src/util/deepAssign.ts"
  ],
  "names": [],
  "mappings": ";;AAAA,kBAAkB,AAAM;AACvB,UAAM,AAAI,OAAG,OAAO,AAAC;AACrB,AAAM,WAAC,AAAI,SAAK,AAAQ,YAAI,AAAI,SAAK,AAAU,AAChD;AAAC;AAED,mBAAmB,AAAO,IAAE,AAAS,MAAE,AAAW;AACjD,UAAM,AAAK,QAAG,AAAI,KAAC,AAAG,AAAC,AACtB,AAAiE;;AAClE,AAAE,AAAC,QAAC,AAAK,UAAK,AAAS,AAAC,WAAC,AAAC;AACzB,AAAM,AACP;AAAC;AAEA,UAAM,AAAS,YAAG,AAAE,GAAC,AAAG,AAAC;AACzB,AAAE,AAAC,QAAC,AAAS,aAAI,AAAI,QAAI,AAAK,UAAK,AAAI,QAAI,OAAO,AAAS,cAAK,AAAQ,YAAI,CAAC,AAAQ,SAAC,AAAK,AAAC,AAAC,QAAC,AAAC;AAC7F,AAAE,WAAC,AAAG,AAAC,OAAG,AAAK,AACjB;AAAC,AACD,AAAI,WAAC,AAAC;AACJ,AAAE,WAAC,AAAG,AAAC,OAAG,AAAM,OAAC,AAAS,WAAE,AAAK,AAAC,AACpC;AAAC,AACH;AAAC;AAED,gBAAgB,AAAO,IAAE,AAAS;AAChC,AAAE,AAAC,QAAC,AAAE,OAAK,AAAI,AAAC,MAAC,AAAC;AAChB,AAAG,AAAC,aAAC,IAAI,AAAG,OAAI,AAAM,OAAC,AAAmB,oBAAC,AAAI,AAAC,AAAC,OAAC,AAAC;AACjD,AAAS,sBAAC,AAAE,IAAE,AAAI,MAAE,AAAG,AAAC,AAC1B;AAAC,AACH;AAAC;AACF,AAAM,WAAC,AAAE,AACV;AAAC;AAED,oBAA2B,AAAW,AAAE;;AAAG,AAAmB;;;AAC7D,AAAG,AAAC,SAAC,IAAI,AAAC,KAAI,AAAO,AAAC,SAAC,AAAC;AACtB,AAAE,AAAC,YAAC,AAAC,KAAI,AAAI,AAAC,MAAC,AAAC;AACb,AAAM,mBAAC,AAAM,QAAE,AAAC,AAAC,AACnB;AAAC,AACJ;AAAC;AACD,AAAM,WAAC,AAAM,AACd;AAAC;AAPe,QAAU,aAOzB",
  "sourcesContent": [
    "function isObject(x: any) {\n\tconst type = typeof x\n\treturn type === 'object' || type === 'function'\n}\n\nfunction assignKey(to: any, from: any, key: string) {\n\tconst value = from[key]\n  // https://github.com/electron-userland/electron-builder/pull/562\n\tif (value === undefined) {\n\t\treturn\n\t}\n\n  const prevValue = to[key]\n  if (prevValue == null || value === null || typeof prevValue !== 'object' || !isObject(value)) {\n    to[key] = value\n  }\n  else {\n    to[key] = assign(prevValue, value)\n  }\n}\n\nfunction assign(to: any, from: any) {\n  if (to !== from) {\n    for (let key of Object.getOwnPropertyNames(from)) {\n      assignKey(to, from, key)\n    }\n  }\n\treturn to\n}\n\nexport function deepAssign(target: any, ...objects: Array<any>) {\n\tfor (let o of objects) {\n\t  if (o != null) {\n      assign(target, o)\n    }\n\t}\n\treturn target\n}"
  ]
}
