{
  "version": 3,
  "file": "asarUtil.js",
  "sourceRoot": "",
  "sources": [
    "../src/asarUtil.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { AsarFileInfo, listPackage, statFile, AsarOptions, AsarFileMetadata, createPackageFromFiles } from \"asar\"\nimport { statOrNull } from \"./util/util\"\nimport { lstat, readdir } from \"fs-extra-p\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport * as path from \"path\"\nimport { Stats } from \"fs\"\nimport pathSorter = require(\"path-sort\")\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./util/awaiter\")\n\nconst concurrency = {concurrency: 50}\n\nfunction walk(dirPath: string, consumer: (file: string, stat: Stats) => void, filter: (file: string) => boolean): BluebirdPromise<any> {\n  return readdir(dirPath)\n    .then(names => {\n      return BluebirdPromise.map(names, name => {\n        const filePath = dirPath + path.sep + name\n        if (!filter(filePath)) {\n          return <any>null\n        }\n\n        return lstat(filePath)\n          .then(stat => {\n            consumer(filePath, stat)\n            if (stat.isDirectory()) {\n              return walk(filePath, consumer, filter)\n            }\n            return null\n          })\n      }, concurrency)\n    })\n}\n\nexport async function createAsarArchive(src: string, resourcesPath: string, options: AsarOptions, filter: (file: string) => boolean): Promise<any> {\n  const metadata: { [key: string]: AsarFileMetadata; } = {}\n  const files: Array<string> = []\n  await walk(src, (it, stat) => {\n      files.push(it)\n      metadata[it] = {\n        type: stat.isFile() ? \"file\" : (stat.isDirectory() ? \"directory\" : \"link\"),\n        stat: stat,\n      }\n    },\n    filter)\n\n  // sort files to minimize file change (i.e. asar file is not changed dramatically on small change)\n  await BluebirdPromise.promisify(createPackageFromFiles)(src, path.join(resourcesPath, \"app.asar\"), pathSorter(files), metadata, options)\n}\n\nexport async function checkFileInPackage(asarFile: string, relativeFile: string) {\n  let stat: AsarFileInfo | null\n  try {\n    stat = statFile(asarFile, relativeFile)\n  }\n  catch (e) {\n    const fileStat = await statOrNull(asarFile)\n    if (fileStat == null) {\n      throw new Error(`File \"${asarFile}\" does not exist. Seems like a wrong configuration.`)\n    }\n\n    try {\n      listPackage(asarFile)\n    }\n    catch (e) {\n      throw new Error(`File \"${asarFile}\" is corrupted: ${e}`)\n    }\n\n    // asar throws error on access to undefined object (info.link)\n    stat = null\n  }\n\n  if (stat == null) {\n    throw new Error(`Application entry file \"${relativeFile}\" in the \"${asarFile}\" does not exist. Seems like a wrong configuration.`)\n  }\n  if (stat.size === 0) {\n    throw new Error(`Application entry file \"${relativeFile}\" in the \"${asarFile}\" is corrupted: size 0`)\n  }\n}"
  ]
}
