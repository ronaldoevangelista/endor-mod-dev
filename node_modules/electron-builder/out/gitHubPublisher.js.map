{
  "version": 3,
  "file": "gitHubPublisher.js",
  "sourceRoot": "",
  "sources": [
    "../src/gitHubPublisher.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { Release, Asset } from \"gh-release\"\nimport { isEmptyOrSpaces } from \"./util/util\"\nimport { log, warn } from \"./util/log\"\nimport { basename } from \"path\"\nimport { parse as parseUrl } from \"url\"\nimport * as mime from \"mime\"\nimport { stat } from \"fs-extra-p\"\nimport { createReadStream } from \"fs\"\nimport { gitHubRequest, HttpError, doGitHubRequest } from \"./gitHubRequest\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { ReadStream } from \"tty\"\nimport progressStream = require(\"progress-stream\")\nimport ProgressBar = require(\"progress\")\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./util/awaiter\")\n\nexport interface Publisher {\n  upload(file: string, artifactName?: string): Promise<any>\n}\n\nexport type PublishPolicy = \"onTag\" | \"onTagOrDraft\" | \"always\" | \"never\"\n\nexport interface PublishOptions {\n  publish?: PublishPolicy | null\n  githubToken?: string | null\n\n  draft?: boolean\n  prerelease?: boolean\n}\n\nexport class GitHubPublisher implements Publisher {\n  private tag: string\n  private _releasePromise: BluebirdPromise<Release>\n\n  private readonly token: string\n  private readonly policy: PublishPolicy\n\n  get releasePromise(): Promise<Release | null> {\n    return this._releasePromise\n  }\n\n  constructor(private owner: string, private repo: string, private version: string, private options: PublishOptions, private isPublishOptionGuessed: boolean = false) {\n    if (isEmptyOrSpaces(options.githubToken)) {\n      throw new Error(\"GitHub Personal Access Token is not specified\")\n    }\n\n    this.token = options.githubToken!\n    this.policy = options.publish || \"always\"\n\n    if (version.startsWith(\"v\")) {\n      throw new Error(`Version must not starts with \"v\": ${version}`)\n    }\n\n    this.tag = `v${version}`\n    this._releasePromise = <BluebirdPromise<Release>>this.init()\n  }\n\n  private async init(): Promise<Release | null> {\n    const createReleaseIfNotExists = this.policy !== \"onTagOrDraft\"\n    // we don't use \"Get a release by tag name\" because \"tag name\" means existing git tag, but we draft release and don't create git tag\n    const releases = await gitHubRequest<Array<Release>>(`/repos/${this.owner}/${this.repo}/releases`, this.token)\n    for (let release of releases) {\n      if (release.tag_name === this.tag) {\n        if (release.draft) {\n          return release\n        }\n\n        if (!this.isPublishOptionGuessed && this.policy === \"onTag\") {\n          throw new Error(`Release with tag ${this.tag} must be a draft`)\n        }\n\n        const message = `Release with tag ${this.tag} is not a draft, artifacts will be not published`\n        if (this.isPublishOptionGuessed || this.policy === \"onTagOrDraft\") {\n          log(message)\n        }\n        else {\n          warn(message)\n        }\n        return null\n      }\n      else if (release.tag_name === this.version) {\n        throw new Error(`Tag name must starts with \"v\": ${release.tag_name}`)\n      }\n    }\n\n    if (createReleaseIfNotExists) {\n      log(`Release with tag ${this.tag} doesn't exists, creating one`)\n      return this.createRelease()\n    }\n    else {\n      log(`Cannot found release with tag ${this.tag}, artifacts will be not published`)\n      return null\n    }\n  }\n\n  async upload(file: string, artifactName?: string): Promise<void> {\n    const fileName = artifactName || basename(file)\n    const release = await this.releasePromise\n    if (release == null) {\n      return\n    }\n\n    const parsedUrl = parseUrl(release.upload_url.substring(0, release.upload_url.indexOf(\"{\")) + \"?name=\" + fileName)\n    const fileStat = await stat(file)\n    let badGatewayCount = 0\n    uploadAttempt: for (let i = 0; i < 3; i++) {\n      const progressBar = (<ReadStream>process.stdin).isTTY ? new ProgressBar(`Uploading ${fileName} [:bar] :percent :etas`, {\n        total: fileStat.size,\n        incomplete: \" \",\n        stream: process.stdout,\n        width: 20,\n      }) : null\n\n      try {\n        return await doGitHubRequest<any>({\n          hostname: parsedUrl.hostname,\n          path: parsedUrl.path,\n          method: \"POST\",\n          headers: {\n            Accept: \"application/vnd.github.v3+json\",\n            \"User-Agent\": \"electron-complete-builder\",\n            \"Content-Type\": mime.lookup(fileName),\n            \"Content-Length\": fileStat.size\n          }\n        }, this.token, (request, reject) => {\n          const fileInputStream = createReadStream(file)\n          fileInputStream.on(\"error\", reject)\n          fileInputStream\n            .pipe(progressStream({\n              length: fileStat.size,\n              time: 1000\n            }, progress => {\n              if (progressBar != null) {\n                progressBar.tick(progress.delta)\n              }\n            }))\n            .pipe(request)\n        })\n      }\n      catch (e) {\n        if (e instanceof HttpError) {\n          if (e.response.statusCode === 422 && e.description != null && e.description.errors != null && e.description.errors[0].code === \"already_exists\") {\n            // delete old artifact and re-upload\n            log(`Artifact ${fileName} already exists, overwrite one`)\n            const assets = await gitHubRequest<Array<Asset>>(`/repos/${this.owner}/${this.repo}/releases/${release.id}/assets`, this.token)\n            for (let asset of assets) {\n              if (asset!.name === fileName) {\n                await gitHubRequest<void>(`/repos/${this.owner}/${this.repo}/releases/assets/${asset!.id}`, this.token, null, \"DELETE\")\n                continue uploadAttempt\n              }\n            }\n\n            log(`Artifact ${fileName} not found, trying to upload again`)\n            continue\n          }\n          else if (e.response.statusCode === 502 && badGatewayCount++ < 3) {\n            continue\n          }\n        }\n\n        throw e\n      }\n    }\n  }\n\n  private createRelease() {\n    return gitHubRequest<Release>(`/repos/${this.owner}/${this.repo}/releases`, this.token, {\n      tag_name: this.tag,\n      name: this.tag,\n      draft: this.options.draft == null || this.options.draft,\n      prerelease: this.options.prerelease != null && this.options.prerelease,\n    })\n  }\n\n  // test only\n  //noinspection JSUnusedGlobalSymbols\n  async getRelease(): Promise<any> {\n    return gitHubRequest<Release>(`/repos/${this.owner}/${this.repo}/releases/${this._releasePromise.value().id}`, this.token)\n  }\n\n  //noinspection JSUnusedGlobalSymbols\n  async deleteRelease(): Promise<any> {\n    if (!this._releasePromise.isFulfilled()) {\n      return BluebirdPromise.resolve()\n    }\n\n    const release = this._releasePromise.value()\n    if (release == null) {\n      return BluebirdPromise.resolve()\n    }\n\n    for (let i = 0; i < 3; i++) {\n      try {\n        return await gitHubRequest(`/repos/${this.owner}/${this.repo}/releases/${release.id}`, this.token, null, \"DELETE\")\n      }\n      catch (e) {\n        if (e instanceof HttpError && (e.response.statusCode === 405 || e.response.statusCode === 502)) {\n          continue\n        }\n\n        throw e\n      }\n    }\n\n    warn(`Cannot delete release ${release.id}`)\n  }\n}"
  ]
}
